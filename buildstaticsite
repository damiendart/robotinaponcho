#!/usr/bin/env ruby
# A really simple static site generator.
#
# Copyright (C) 2013-2018 Damien Dart, <damiendart@pobox.com>.
# This file is distributed under the MIT licence. For more information,
# please refer to the accompanying "LICENCE" file.

require 'bundler/inline'
require 'fileutils'
require 'open3'
require 'yaml'

gemfile do
  source 'https://rubygems.org'
  gem 'front_matter_parser'
  gem 'haml'
  gem 'html-proofer', require: false
  gem 'redcarpet'
end

# The accompanying "package.json" lists all Node.js-related depedencies.
ENV['PATH'] = "#{__dir__}/node_modules/.bin:" + ENV['PATH']

module FrontMatterParser
  module SyntaxParser
    Markdown = MultiLineComment['<!--', '-->']
  end
end

def markdown(markdown)
  Redcarpet::Markdown.new(Redcarpet::Render::HTML).render(markdown)
end

def sass(sass)
  # TODO: Add error handling.
  Open3.capture3(
    "npx sass -I #{File.join(__dir__, 'resources', 'sass')} --stdin | " \
      'npx postcss --use autoprefixer | npx cleancss',
    stdin_data: sass
  )[0]
end

def haml(haml)
  Haml::Engine.new(haml).render
end

output_directory = File.expand_path(ENV['BSS_OUTPUT'] || './public')
source_directory = File.expand_path(ENV['BSS_SOURCE'] || './src')
sitemap_entries = []

if File.exist?(File.join(source_directory, '_base.haml'))
  base = FrontMatterParser::Parser.parse_file(
    File.join(source_directory, '_base.haml')
  )
  base_template = Haml::Engine.new(base.content)
end

Dir.glob(File.join(source_directory, '**/*')).each do |file|
  next if File.directory?(file) || file =~ %r{\/_}

  output_file = file.sub(source_directory, output_directory)
  case File.extname(file)
  when /.(haml|markdown)$/
    parsed = FrontMatterParser::Parser.parse_file(file)
    page = base.front_matter.merge(parsed.front_matter) do |_, old, new|
      old.is_a?(Array) ? [old, new].flatten : new
    end
    page['content'] = send(File.extname(file)[1..-1], parsed.content)
    page['slug'] = output_file.sub(
      output_directory + '/', ''
    ).sub(/(index)?\.html/, '')
    sitemap_entries << File.join(page['url_base'], page['slug'])
    stdin, stdout, = Open3.popen3(
      'npx html-minifier --collapse-whitespace --decode-entities ' \
      '--minify-js --minify-css --remove-comments --remove-empty-attributes'
    )
    stdin.puts(
      Redcarpet::Render::SmartyPants.render(
        base_template.render(Object.new, page)
      )
    )
    stdin.close
    compiled_output = stdout.read
    output_file.sub!(/(haml|markdown)$/, 'html')
  when '.js'
    compiled_output = `npx uglifyjs #{file} -b beautify=false`
  when '.scss'
    compiled_output = sass(File.read(file))
    output_file.sub!(/scss$/, 'css')
  when '.svg'
    compiled_output = `npx svgo #{file} -o -`
  end
  FileUtils.mkdir_p(File.dirname(output_file))
  if compiled_output
    File.write(output_file, compiled_output)
  else
    FileUtils.cp(file, output_file)
  end
  puts "Written \"#{output_file}\"."
end

unless sitemap_entries.empty?
  sitemap_file = File.join(output_directory, 'sitemap.xml')
  File.open(sitemap_file, 'w') do |file|
    file.write('<?xml version="1.0" encoding="UTF-8"?>')
    file.write('<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">')
    sitemap_entries.each do |entry|
      file.write("<url><loc>#{entry}</loc></url>")
    end
    file.write('</urlset>')
  end
  puts "Written \"#{sitemap_file}\"."
end
