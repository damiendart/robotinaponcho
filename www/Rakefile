# Rakefile for Damien Dart's personal website.
#
# Copyright (C) 2013-2016 Damien Dart, <damiendart@pobox.com>.
# This file is distributed under the MIT licence. For more information,
# please refer to the accompanying "LICENCE" file.

require "erb"
require "rubygems"
require "bundler/setup"
require "yaml"
Bundler.require(:default)

Haml::Filters::Scss.options[:cache] = false
Haml::Filters::Scss.options[:style] = :compressed
Haml::Options.defaults[:attr_wrapper] = "\""
Haml::Options.defaults[:escape_attrs] = false
Haml::Options.defaults[:format] = :html5
Haml::Options.defaults[:remove_whitespace] = true
# Increase the degree of precision of values that Sass spits out to
# prevent some browsers from rendering elements a pixel narrower than
# intended. See <https://github.com/nex3/sass/issues/319> for more
# information.
Sass::Script::Number.precision = 8

ERROR_CODES = %w{403 404 410}

def tidyHTML(html_document)
  html_document = html_document.gsub(/^\s*$\n/, "")
  html_document = html_document.gsub(%r{^\s*//.*\n}, "")
  # HACK: Remove stray newlines from minified CSS which Sass 3.3 (and
  # newer) leaves behind.
  html_document = html_document.gsub(/}\s*(html|\.)/, "}\\1")
  html_document = html_document.gsub(/\s*<(\/)?(script|style)>\s*/m, "<\\1\\2>")
  return html_document
end

ERROR_CODES.each do |error_code|
  desc "Spit out the #{error_code} HTTP error document."
  file "public/#{error_code}.html" => FileList["public/_error.*"] do |task|
    puts "# Spitting out \"" + task.name + "\"."
    output = Haml::Engine.new(File.read("public/_error.haml")).render(
        Object.new, :error_code => error_code)
    output = tidyHTML(output)
    File.open(task.name, "w") do |file|
      file.write(output)
    end
  end
end

desc "Spit out \".htaccess\"."
file "public/.htaccess" => "public/_.htaccess.erb" do |task|
  puts "# Spitting out \"" + task.name + "\"."
  output = ERB.new(File.read("public/_.htaccess.erb"), nil, "-").result()
  File.open(task.name, "w") do |file|
    file.write(output)
  end
end

FileList["**/*_*.markdown"].each do |markdown_file|
  output_filename = markdown_file.gsub(/_(.*).markdown/, "\\1.html")

  desc "Spit out \"#{output_filename}\"."
  file output_filename => FileList["public/_base.*", "Rakefile", 
      markdown_file] do |task|
    MARKDOWN = Redcarpet::Markdown.new(Redcarpet::Render::HTML,
        disable_indented_code_blocks: true, fenced_code_blocks: true)
    page_body = File.read(markdown_file)
    puts "# Spitting out \"" + task.name + "\"."
    output = Haml::Engine.new(File.read("public/_base.haml")).render(
        Object.new, :page_body => MARKDOWN.render(page_body),
        :page_title => page_body.split(/\s*==+\s*/)[0])
    output = output.gsub(/<!--.*-->\n/m, "")
    output = tidyHTML(output)
    output = Redcarpet::Render::SmartyPants.render(output)
    File.open(task.name, "w") do |file|
      file.write(output)
    end
  end

  desc "Spit out the compressed version of \"#{output_filename}\"."
  file "#{output_filename}.compressed" => output_filename do |task|
    puts "# Spitting out \"" + task.name + "\"."
    `gzip -9c #{output_filename} > #{task.name}`
  end
end

desc "Spit out Google Webmaster Tools' Verification file."
file "public/googlefb3645e0f9f23eaf.html" do |task|
  puts "# Spitting out \"" + task.name + "\"."
  File.open(task.name, "w") do |file|
    file.write("google-site-verification: " + File.basename(task.name) + "\n")
  end
end

desc "Spit out \"robots.txt\"."
file "public/robots.txt" do |task|
  puts "# Spitting out \"" + task.name + "\"."
  File.open(task.name, "w") do |file|
    file.write("User-agent: *\n")
    (ERROR_CODES.map{ |c| "#{c}.html" } + ["assets/",
        "git/*a=", "git/*.git/"]).each do |path|
      file.write("Disallow: /#{path}\n")
    end
  end
end

desc "Spit out the art porfolio."
file "public/art/index.html" => FileList["public/art/_index.*"] do |task|
  puts "# Spitting out \"" + task.name + "\"."
  output = Haml::Engine.new(File.read("public/art/_index.haml")).render
  output = output.gsub(/<!--.*-->\n/m, "")
  output = tidyHTML(output)
  output = Redcarpet::Render::SmartyPants.render(output)
  File.open(task.name, "w") do |file|
    file.write(output)
  end
end

desc "Spit out the compressed art porfolio."
file "public/art/index.html.compressed" => "public/art/index.html" do |task|
  puts "# Spitting out \"" + task.name + "\"."
  `gzip -9c public/art/index.html > #{task.name}`
end

desc "Spit out the Folder of Crap CGI script."
file "public/crap/index.cgi" => FileList["public/crap/_index.*"] do |task|
  puts "# Spitting out \"" + task.name + "\"."
  script = File.read("public/crap/_index.pl")
  script = script.gsub(/__DATA__.*$/m, "")
  output = Haml::Engine.new(File.read("public/crap/_index.haml")).render
  output = tidyHTML(output)
  output = Redcarpet::Render::SmartyPants.render(output)
  # HACK: The SmartyPants parser doesn't "HTMl::Template"'s tags being
  # used for HTML element attribute values.
  output = output.gsub(/&ldquo;/, "\"")
  output = output.gsub(/&quot;/, "\"")
  output = output.gsub(/&rdquo;/, "\"")
  File.open(task.name, "w") do |file|
    file.write(script)
    file.write("__DATA__\n")
    file.write(output)
  end
end

OUTPUT_FILES = Rake.application.tasks.collect{ |task| task.name }.reject { 
    |task_name| ["clean", "clobber"].include?(task_name) }
CLOBBER.include(OUTPUT_FILES)
task :default => OUTPUT_FILES
