#!/usr/bin/env python
"""Maintains mirrors of a GitHub user's public repositories.

Optionally does some per-repository stuff for Gitweb's benefit.

Copyright (C) 2013-2016 Damien Dart, <damiendart@pobox.com>.
This file is distributed under the MIT licence. For more information,
please refer to the accompanying "LICENCE" file.
"""

import cgi
import json
import os
import re
import sys
import urllib2
import subprocess

if __name__ == "__main__":
  if len(sys.argv) < 4:
    sys.stderr.write("Not enough operands\n")
    sys.stderr.write("USAGE: %s [--gitweb] GITHUB-USERNAME FOLDER OAUTH2-TOKEN\n" % sys.argv[0])
    sys.exit(1)
  gitweb = False
  if "--gitweb" in sys.argv:
    sys.argv.remove("--gitweb")
    gitweb = True
  repositories = json.load(urllib2.urlopen(
      "https://api.github.com/users/%s/repos?access_token=%s" %
      (sys.argv[1], sys.argv[3])))
  for repository in repositories:
    os.chdir(os.path.normpath(sys.argv[2]))
    if (os.path.isdir(os.path.basename(repository["git_url"]))):
      os.chdir(os.path.basename(repository["git_url"]))
      subprocess.check_call(["git", "fetch", "-q"])
      os.chdir(os.path.normpath(sys.argv[2]))
    else:
      subprocess.check_call(["git", "clone", "-q", "--mirror",
          repository["git_url"]])
    if gitweb:
      os.chdir(os.path.basename(repository["git_url"]))
      for k, v in {"url": repository["clone_url"],
          "description": repository["description"]}.iteritems():
        subprocess.check_call(["git", "config", "--replace-all",
            "gitweb.%s" % k, v])
      subprocess.check_call(["git", "config", "--replace-all", "gitweb.owner",
          json.load(urllib2.urlopen("https://api.github.com/users/%s?access_token=%s" %
          (repository["owner"]["login"], sys.argv[3])))["name"]])
      subprocess.check_call(["git", "config", "--add", "gitweb.url",
          "http://www.robotinaponcho.net/git/%s" %
          os.path.basename(repository["git_url"])])
      with open("README.html", "w") as f:
        f.write("<pre>%s</pre>\n" % cgi.escape(subprocess.Popen(["git",
            "cat-file", "blob", "HEAD:%s" % filter(lambda i:
            re.compile(r"README").search(i), subprocess.Popen(["git",
            "ls-tree", "HEAD", "--name-only"],
            stdout=subprocess.PIPE).communicate()[0].split("\n"))[0]],
            stdout=subprocess.PIPE).communicate()[0]))
      with open("description", "w") as f:
        f.write(repository["description"] + "\n")
      open("git-daemon-export-ok", "a").close() # For "git http-backend".
      subprocess.check_call(["git", "update-server-info"])
      # HACK: Resets overstrict permissions after
      # "git update-server-info". For more information, see:
      # <https://www.mail-archive.com/git@vger.kernel.org/msg63438.html>.
      subprocess.check_call(["chmod", "0664", "info/refs"])
      subprocess.check_call(["chmod", "0664", "objects/info/packs"])
