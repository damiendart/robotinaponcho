#!/usr/bin/env node

const { promisify } = require('util');

const fse = require('fs-extra');
const glob = promisify(require('glob'));
const path = require('path');

const processors = [
  require('./processors/JavaScriptProcessor'),
  require('./processors/SassProcessor'),
  require('./processors/SVGProcessor'),
  require('./processors/TwigProcessor'),
];

if (
  process.argv.length !== 4
  || process.argv.includes('--help')
  || process.argv.includes('-h')
) {
  const askingForHelp = process.argv.includes('--help')
    || process.argv.includes('-h');

  (askingForHelp ? console.log : console.error)(
    `"${path.basename(process.argv[1])}" is a real basic static site generator.
    Usage: ${path.basename(process.argv[1])} [INPUT-DIRECTORY] [OUTPUT-DIRECTORY]`
      .trim().replace(/\n {4}/g, '\n')
  );
  process.exit(askingForHelp ? 0 : 1);
}

const inputDirectory = path.resolve(process.argv[2]);
const outputDirectory = path.resolve(process.argv[3]);
let writtenFilesCount = 0;

glob('**/*', { cwd: inputDirectory, nodir: true }).then(files => {
  return Promise.all(files.map(file => {
    const applicableProcessors = processors.filter(processor => {
      return processor.INPUT_EXTENSION === path.extname(file);
    });

    if (applicableProcessors.length > 0) {
      return Promise.all(
          applicableProcessors.map(processor => {
            const inputFile = path.join(inputDirectory, file);
            const outputFile = path.join(outputDirectory, file)
              .replace(processor.INPUT_EXTENSION, processor.OUTPUT_EXTENSION);

            return fse.mkdirs(path.dirname(outputFile))
              .then(_ => fse.readFile(inputFile, 'utf8'))
              .then(fileContents => {
                return (new processor()).process(fileContents, inputFile, outputFile);
              })
              .then(output => {
                return fse.writeFile(outputFile, output);
              })
              .then(_ => {
                console.log(`[✔] Written "${outputFile}"`);
                writtenFilesCount++;
              })
              .catch(e => {
                console.error(`[✘] Unable to write "${outputFile}"`);
                console.error(`\n${e.toString()}`);
                process.exit(1);
              });
          }),
      );
    } else {
      const outputFile = path.join(outputDirectory, file);

      return fse.copy(path.join(inputDirectory, file), outputFile)
        .then(_ => {
          console.log(`[✔] Written "${outputFile}"`);
          writtenFilesCount++;
        })
        .catch(e => {
          console.error(`[✘] Unable to write "${outputFile}"`);
          console.error(`\n${e.toString()}`);
          process.exit(1);
        });
    }
  }));
})
  .then(_ => {
    console.log(`\n${writtenFilesCount} file(s) written!`);
  })
  .catch(e => {
    console.error(`[✘] An error has occurred!`);
    console.error(`\n${e.toString()}`);
    process.exit(1);
  });
