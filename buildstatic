#!/usr/bin/env ruby
# A really simple static site generator.
#
# Copyright (C) 2013-2018 Damien Dart, <damiendart@pobox.com>.
# This file is distributed under the MIT licence. For more information,
# please refer to the accompanying "LICENCE" file.

require 'bundler/inline'
require 'fileutils'
require 'open3'
require 'yaml'

gemfile do
  source 'https://rubygems.org'
  gem 'front_matter_parser'
  gem 'haml'
  gem 'html-proofer', require: false
  gem 'redcarpet'
end

# The accompanying "package.json" lists all Node.js-related dependencies.
ENV['PATH'] = "#{__dir__}/node_modules/.bin:" + ENV['PATH']

module FrontMatterParser
  module SyntaxParser
    Markdown = MultiLineComment['<!--', '-->']
  end
end

def read_source_file(file)
  File.read(File.join(ENV['BS_SOURCE'] || './static_src', file))
end

def convert_markdown(input)
  Redcarpet::Markdown.new(Redcarpet::Render::HTML).render(input)
end

def convert_scss(input)
  stdout, stderr, = Open3.capture3(
    'npx sass --stdin | npx postcss --use autoprefixer | npx cleancss',
    stdin_data: input
  )
  raise stderr unless stderr.empty?

  stdout
end

def convert_haml(input)
  Haml::Engine.new(input).render
end

def convert_html(input)
  stdout, stderr, = Open3.capture3(
    'npx html-minifier --collapse-whitespace --decode-entities ' \
      '--minify-js --minify-css --remove-comments --remove-empty-attributes',
    stdin_data: Redcarpet::Render::SmartyPants.render(input)
  )
  raise stderr unless stderr.empty?

  stdout
end

def convert_js(input)
  stdout, stderr, = Open3.capture3(
    'npx uglifyjs -b beautify=false',
    stdin_data: input
  )
  raise stderr unless stderr.empty?

  stdout
end

def convert_js_erb(input)
  convert_js(ERB.new(input).result)
end

def convert_svg(input)
  Open3.capture3('npx svgo -i -', stdin_data: input)[0]
end

def convert_ext(input)
  input.gsub!(/php\.haml$/, 'php')
  input.gsub!(/(haml|markdown)$/, 'html')
  input.gsub!(/js\.erb$/, 'js')
  input.gsub!(/scss$/, 'css')
  input
end

output_dir = File.expand_path(ENV['BS_OUTPUT'] || './public')
source_dir = File.expand_path(ENV['BS_SOURCE'] || './static_src')
sitemap = []

if File.exist?(File.join(source_dir, '_base.haml'))
  base = FrontMatterParser::Parser.parse_file(
    File.join(source_dir, '_base.haml')
  )
  base_template = Haml::Engine.new(base.content)
end

Dir.glob(File.join(source_dir, '**/*')).each do |file|
  next if File.directory?(file) || file =~ %r{\/_}

  output_file = convert_ext(file.sub(source_dir, output_dir))
  case file
  when /(haml|markdown)$/
    parsed = FrontMatterParser::Parser.parse_file(file)
    page = base.front_matter.merge(parsed.front_matter) do |_, old, new|
      old.is_a?(Array) ? [old, new].flatten : new
    end
    page['content'] = send("convert_#{Regexp.last_match(1)}", parsed.content)
    page['slug'] = output_file.gsub(%r{(#{output_dir}\/|(index)?\.(html|php))}, '')
    sitemap << "#{page['url_base']}#{page['slug']}" if page['add_to_sitemap']
    output = convert_html(base_template.render(Object.new, page))
  when /(js|js\.erb|scss|svg)$/
    output = send(
      "convert_#{Regexp.last_match(1).sub('.', '_')}",
      File.read(file)
    )
  end
  FileUtils.mkdir_p(File.dirname(output_file))
  if output
    File.write(output_file, output)
  else
    FileUtils.cp(file, output_file)
  end
  puts "Written \"#{output_file}\"."
end

unless sitemap.empty?
  sitemap_file = File.join(output_dir, 'sitemap.xml')
  File.open(sitemap_file, 'w') do |file|
    file.write('<?xml version="1.0" encoding="UTF-8"?>')
    file.write('<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">')
    sitemap.each do |entry|
      file.write("<url><loc>#{entry}</loc></url>")
    end
    file.write('</urlset>')
  end
  puts "Written \"#{sitemap_file}\"."
end
