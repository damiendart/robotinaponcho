// Copyright (C) Damien Dart, <damiendart@pobox.com>.
// This file is distributed under the MIT licence. For more information,
// please refer to the accompanying "LICENCE" file.

@use "sass:math";
@use "../functions";
@use "../mixins";
@use "../variables";

.button {
  $s: &;

  appearance: none;
  border: none;
  border-radius: variables.$base-line-height * 0.25;
  display: inline-block;
  font: inherit;
  font-weight: bold;
  line-height: inherit;
  outline-offset: functions.px-to-rem(2px);
  padding: math.div(variables.$base-line-height, 2) variables.$base-line-height;
  position: relative;
  text-decoration-line: none;
  white-space: nowrap;

  img {
    display: inline-block;
    height: variables.$base-line-height;
    margin: 0;
    vertical-align: bottom;
  }

  &:not(#{$s}--inverted) {
    --outline-color: var(--button-background);

    background: var(--button-background);
    color: var(--button-foreground);

    &:hover,
    &:focus {
      background: var(--button-background-hover-fallback);
      background-color: color-mix(in oklch, var(--button-background) 100%, black 6%);
    }

    &:active {
      background: var(--button-background-active-fallback);
      background-color: color-mix(in oklch, var(--button-background) 100%, black 12%);
    }
  }

  &__download {
    @include mixins.breakpoint-between(xs, sm) {
      &::after {
        content: ":";
      }
    }
  }

  &__itchio {
    display: inline-block;
    position: relative;
    vertical-align: middle;
    margin: functions.px-to-rem(-6px) 0 0 functions.px-to-rem(-5px);

    &::before {
      background: currentColor;
      content: "";
      display: block;
      height: variables.$base-line-height;
      margin-left: functions.px-to-rem(3px);
      mask: functions.cache-bust-url("/assets/itchio.svg") no-repeat center;
      width: functions.px-to-rem(98.25px);
    }
  }

  &--inverted {
    $border-width: variables.$base-one-pixel-in-rem * 3;

    background: transparent;
    border: $border-width solid currentColor;
    padding: (variables.$base-line-height * 0.5 - $border-width) (variables.$base-line-height - $border-width);
  }

  &--small {
    padding: math.div(variables.$base-line-height, 4) (variables.$base-line-height * 0.75);
  }
}
